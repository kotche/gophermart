// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/repository.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kotche/gophermart/internal/model"
)

// MockAuthRepoContract is a mock of AuthRepoContract interface.
type MockAuthRepoContract struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoContractMockRecorder
}

// MockAuthRepoContractMockRecorder is the mock recorder for MockAuthRepoContract.
type MockAuthRepoContractMockRecorder struct {
	mock *MockAuthRepoContract
}

// NewMockAuthRepoContract creates a new mock instance.
func NewMockAuthRepoContract(ctrl *gomock.Controller) *MockAuthRepoContract {
	mock := &MockAuthRepoContract{ctrl: ctrl}
	mock.recorder = &MockAuthRepoContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepoContract) EXPECT() *MockAuthRepoContractMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthRepoContract) CreateUser(ctx context.Context, user *model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoContractMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepoContract)(nil).CreateUser), ctx, user)
}

// GetUserID mocks base method.
func (m *MockAuthRepoContract) GetUserID(ctx context.Context, user *model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockAuthRepoContractMockRecorder) GetUserID(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthRepoContract)(nil).GetUserID), ctx, user)
}

// MockAccrualOrderRepoContract is a mock of AccrualOrderRepoContract interface.
type MockAccrualOrderRepoContract struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualOrderRepoContractMockRecorder
}

// MockAccrualOrderRepoContractMockRecorder is the mock recorder for MockAccrualOrderRepoContract.
type MockAccrualOrderRepoContractMockRecorder struct {
	mock *MockAccrualOrderRepoContract
}

// NewMockAccrualOrderRepoContract creates a new mock instance.
func NewMockAccrualOrderRepoContract(ctrl *gomock.Controller) *MockAccrualOrderRepoContract {
	mock := &MockAccrualOrderRepoContract{ctrl: ctrl}
	mock.recorder = &MockAccrualOrderRepoContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualOrderRepoContract) EXPECT() *MockAccrualOrderRepoContractMockRecorder {
	return m.recorder
}

// GetUploadedOrders mocks base method.
func (m *MockAccrualOrderRepoContract) GetUploadedOrders(ctx context.Context, userID int) ([]model.AccrualOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadedOrders", ctx, userID)
	ret0, _ := ret[0].([]model.AccrualOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadedOrders indicates an expected call of GetUploadedOrders.
func (mr *MockAccrualOrderRepoContractMockRecorder) GetUploadedOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadedOrders", reflect.TypeOf((*MockAccrualOrderRepoContract)(nil).GetUploadedOrders), ctx, userID)
}

// GetUserIDByNumberOrder mocks base method.
func (m *MockAccrualOrderRepoContract) GetUserIDByNumberOrder(ctx context.Context, number uint64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByNumberOrder", ctx, number)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserIDByNumberOrder indicates an expected call of GetUserIDByNumberOrder.
func (mr *MockAccrualOrderRepoContractMockRecorder) GetUserIDByNumberOrder(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByNumberOrder", reflect.TypeOf((*MockAccrualOrderRepoContract)(nil).GetUserIDByNumberOrder), ctx, number)
}

// SaveOrder mocks base method.
func (m *MockAccrualOrderRepoContract) SaveOrder(ctx context.Context, order *model.AccrualOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockAccrualOrderRepoContractMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockAccrualOrderRepoContract)(nil).SaveOrder), ctx, order)
}

// MockWithdrawOrderRepoContract is a mock of WithdrawOrderRepoContract interface.
type MockWithdrawOrderRepoContract struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawOrderRepoContractMockRecorder
}

// MockWithdrawOrderRepoContractMockRecorder is the mock recorder for MockWithdrawOrderRepoContract.
type MockWithdrawOrderRepoContractMockRecorder struct {
	mock *MockWithdrawOrderRepoContract
}

// NewMockWithdrawOrderRepoContract creates a new mock instance.
func NewMockWithdrawOrderRepoContract(ctrl *gomock.Controller) *MockWithdrawOrderRepoContract {
	mock := &MockWithdrawOrderRepoContract{ctrl: ctrl}
	mock.recorder = &MockWithdrawOrderRepoContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawOrderRepoContract) EXPECT() *MockWithdrawOrderRepoContractMockRecorder {
	return m.recorder
}

// DeductPoints mocks base method.
func (m *MockWithdrawOrderRepoContract) DeductPoints(ctx context.Context, order *model.WithdrawOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductPoints", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeductPoints indicates an expected call of DeductPoints.
func (mr *MockWithdrawOrderRepoContractMockRecorder) DeductPoints(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductPoints", reflect.TypeOf((*MockWithdrawOrderRepoContract)(nil).DeductPoints), ctx, order)
}

// GetAccruals mocks base method.
func (m *MockWithdrawOrderRepoContract) GetAccruals(ctx context.Context, UserID int) float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccruals", ctx, UserID)
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetAccruals indicates an expected call of GetAccruals.
func (mr *MockWithdrawOrderRepoContractMockRecorder) GetAccruals(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccruals", reflect.TypeOf((*MockWithdrawOrderRepoContract)(nil).GetAccruals), ctx, UserID)
}

// GetWithdrawalOfPoints mocks base method.
func (m *MockWithdrawOrderRepoContract) GetWithdrawalOfPoints(ctx context.Context, userID int) ([]model.WithdrawOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalOfPoints", ctx, userID)
	ret0, _ := ret[0].([]model.WithdrawOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalOfPoints indicates an expected call of GetWithdrawalOfPoints.
func (mr *MockWithdrawOrderRepoContractMockRecorder) GetWithdrawalOfPoints(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalOfPoints", reflect.TypeOf((*MockWithdrawOrderRepoContract)(nil).GetWithdrawalOfPoints), ctx, userID)
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawOrderRepoContract) GetWithdrawals(ctx context.Context, UserID int) float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, UserID)
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawOrderRepoContractMockRecorder) GetWithdrawals(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawOrderRepoContract)(nil).GetWithdrawals), ctx, UserID)
}
