// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/broker_repository.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kotche/gophermart/internal/broker/model"
)

// MockBrokerRepoContract is a mock of BrokerRepoContract interface.
type MockBrokerRepoContract struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerRepoContractMockRecorder
}

// MockBrokerRepoContractMockRecorder is the mock recorder for MockBrokerRepoContract.
type MockBrokerRepoContractMockRecorder struct {
	mock *MockBrokerRepoContract
}

// NewMockBrokerRepoContract creates a new mock instance.
func NewMockBrokerRepoContract(ctrl *gomock.Controller) *MockBrokerRepoContract {
	mock := &MockBrokerRepoContract{ctrl: ctrl}
	mock.recorder = &MockBrokerRepoContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerRepoContract) EXPECT() *MockBrokerRepoContractMockRecorder {
	return m.recorder
}

// GetOrdersForProcessing mocks base method.
func (m *MockBrokerRepoContract) GetOrdersForProcessing(ctx context.Context, limit int) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForProcessing", ctx, limit)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForProcessing indicates an expected call of GetOrdersForProcessing.
func (mr *MockBrokerRepoContractMockRecorder) GetOrdersForProcessing(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForProcessing", reflect.TypeOf((*MockBrokerRepoContract)(nil).GetOrdersForProcessing), ctx, limit)
}

// UpdateOrderAccruals mocks base method.
func (m *MockBrokerRepoContract) UpdateOrderAccruals(ctx context.Context, orderAccruals []model.OrderAccrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderAccruals", ctx, orderAccruals)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderAccruals indicates an expected call of UpdateOrderAccruals.
func (mr *MockBrokerRepoContractMockRecorder) UpdateOrderAccruals(ctx, orderAccruals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderAccruals", reflect.TypeOf((*MockBrokerRepoContract)(nil).UpdateOrderAccruals), ctx, orderAccruals)
}
